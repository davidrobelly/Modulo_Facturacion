package DBClases;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import MonroyRobelly.Modelo.Campeonato.Jugador;

public class JugadorDB {

	public ConexionDB conexion = new ConexionDB ();
	
	public void crearTabla () {
		conexion.conectar();
		this.conexion.conectar();
		try {

			conexion.stmtSQL.executeUpdate ("DROP TABLE IF EXISTS jugador");
			
			conexion.stmtSQL.executeUpdate (	"CREATE TABLE jugador " +
									"(id 		TINYINT, " + 
									" nombre 	VARCHAR(32), " + 
									" partidasJugadas INTEGER, " + 
									" partidasGanadas	INTEGER, "+
									" partidasPerdidas INTEGER) " );
		
			conexion.conexion.close();
         
		} catch (SQLException ex) {
			System.err.print("Problema en la conexion: " + ex);		
		}
	}
	
	public void insertarNuevo(Jugador jugador) {
		
		this.conexion.conectar();
		try {

			conexion.stmtSQL.executeUpdate ("INSERT INTO jugador VALUES (" +
					jugador.getID() + ", '" + jugador.getNombre() + "', " +
					jugador.getPartidasJugadas() + ", " + 
					jugador.getPartidasGanadas() +  ", "+ 
					jugador.getPartidasPerdidas()+")");
			
			conexion.conexion.close();
			
         
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);		
		}
	}
	
	public void insertarNuevo(List<Jugador> lista) {
		
		this.conexion.conectar();
		try {
			
			for (int i = 0; i < lista.size(); i++) {
				conexion.stmtSQL.executeUpdate ("INSERT INTO jugador VALUES (" +
										lista.get(i).getID() + ", '" + lista.get(i).getNombre() + "', " +
										lista.get(i).getPartidasJugadas() + ", " + 
										lista.get(i).getPartidasGanadas() +  ", "+ 
										lista.get(i).getPartidasPerdidas()+")");
				
			}

			conexion.conexion.close();
			
         
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);		
		}
	}

	public void  listar() {
		try {
			this.conexion.conectar();
			ResultSet objRS = conexion.stmtSQL.executeQuery( "SELECT * FROM jugador" );
			while (objRS.next()) {
				System.out.println (objRS.getByte ("id") + " " + 
				objRS.getString	("nombre") 	+ " " + 
				objRS.getInt("partidasJugadas") + " " + 
				objRS.getInt("partidasGanadas")+" "+
				objRS.getInt("partidasPerdidas")); 
			}
			conexion.conexion.close();
		} 
		catch (SQLException ex) 
		{
			System.err.print("Problema: " + ex);	
		}
		
	}

	
	
	
	public List <Jugador> getLista() {
		List <Jugador> listaJugadores = new ArrayList <Jugador>();
		try {
			this.conexion.conectar();
			ResultSet objRS = conexion.stmtSQL.executeQuery( "SELECT * FROM jugador" );
			while (objRS.next()) {
				Jugador jugador = new Jugador ((byte) objRS.getByte ("id"), 
											objRS.getString	("nombre"), 
											objRS.getInt	("partidasJugadas"), 
											objRS.getInt	("partidasGanadas"), 
											objRS.getInt	("partidasPerdidas"));
				listaJugadores.add(jugador);
			}
			conexion.conexion.close();
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
		return listaJugadores;
	}

	public List <Jugador> getLista(int id) {
		List <Jugador> listaJugadores = new ArrayList <Jugador>();
		Jugador jugador;
		try {
			this.conexion.conectar();

			ResultSet objRS = conexion.stmtSQL.executeQuery( "SELECT * FROM jugador WHERE idJugador = " + id );
			while (objRS.next()) {
				jugador = new Jugador ((byte) objRS.getInt ("id"), objRS.getString	("nombre"), 
													objRS.getInt	("partidasJugadas"), 
													objRS.getInt	("partidasGanadas"),
													objRS.getInt	("partidasPerdidas"));
													
				listaJugadores.add(jugador);
			}
			
			conexion.conexion.close();
			
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
		
		return listaJugadores;
		
	}
	
	public void eliminarRegistro (int id) {
		try {
			this.conexion.conectar();

			conexion.stmtSQL.executeUpdate("DELETE FROM jugador " +
                    " WHERE id = '" + id + "'");
			
			conexion.conexion.close();
			
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
	}

	public void actualizarRegistro (Jugador jugador) {
		try {
			this.conexion.conectar();

			conexion.stmtSQL.executeUpdate("UPDATE jugador "+
                    "SET id = " + jugador.getID() + "," +
                    "nombre = '" + jugador.getNombre() +"'," +
                    "partidasJugadas = " + jugador.getPartidasJugadas() +"," +
                    "partidasGanadas = "+ jugador.getPartidasGanadas() +","+  
                    "partidasPerdidas = "+ jugador.getPartidasPerdidas() +  
                    " WHERE id = " + jugador.getID() );
			
			conexion.conexion.close();
			
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
	}
	
	public Jugador consultarPorID (int id) {
		Jugador jugador = null;
		try {
			this.conexion.conectar();

			ResultSet objRS = conexion.stmtSQL.executeQuery( 
					"SELECT * FROM jugador WHERE id =" + id );
			if (objRS.next())
				jugador = new Jugador ( objRS.getByte ("id"), 
										objRS.getString	("nombre"), 
										objRS.getInt("partidasJugadas"),
										objRS.getInt("partidasGanadas"),
										objRS.getInt("partidasPerdidas"));	
					
			conexion.conexion.close();
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
		
		return jugador;
	}
	
	
	
	public void obtenerDeMayorAMenor () {
		
		try {
			this.conexion.conectar();

			ResultSet objRS = conexion.stmtSQL.executeQuery( "SELECT * FROM jugador ORDER BY partidasGanadas DESC" );
			while (objRS.next()) {
				
				System.out.println (objRS.getByte ("id") + " " + 
				objRS.getString	("nombre") 	+ " " + 
				objRS.getInt("partidasJugadas") + " " + 
				objRS.getInt("partidasGanadas")+" "+
				objRS.getInt("partidasPerdidas")); 

			}
			
			conexion.conexion.close();
		} catch (SQLException ex) {
			System.err.print("Problema: " + ex);	
		}
		
	}
	
	
	
	
	
	
}
